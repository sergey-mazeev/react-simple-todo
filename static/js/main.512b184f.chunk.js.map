{"version":3,"sources":["context.js","Todo/TodoItem.jsx","Todo/TodoList.jsx","Loader.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Context","createContext","TodoItem","props","title","id","completed","index","useContext","toggleTask","deleteTask","className","clsx","type","onChange","checked","htmlFor","onClick","TodoList","todos","map","todo","key","initialState","AddTodo","React","lazy","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","value","taskId","filter","task","Suspense","fallback","createTodo","success","Date","now","Loader","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAIeA,EAFCC,0BC0BDC,EAvBE,SAACC,GAAW,IACpBC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,GAAIC,EAAoBH,EAApBG,UAAWC,EAASJ,EAATI,MADH,EAEOC,qBAAWR,GAArCS,EAFmB,EAEnBA,WAAYC,EAFO,EAEPA,WACnB,OACE,wBAAIC,UAAWC,IAAK,mBAAoB,CAAC,wBAAyBN,KAChE,8BACE,2BAAOD,GAAE,kBAAaA,GAAMQ,KAAK,WAAWC,SAAU,kBAAML,EAAWJ,IAAKU,QAAST,IACrF,2BAAOU,QAAO,kBAAaX,IACzB,2BAAIE,EAAQ,EAAZ,MACCH,IAGL,4BAAQS,KAAK,SAASI,QAAS,kBAAMP,EAAWL,KAAhD,UCESa,EAfE,SAACf,GAAW,IACpBgB,EAAShB,EAATgB,MACP,OACE,wBAAIR,UAAU,cACXQ,EAAMC,KAAI,SAACC,EAAMd,GAAP,OACT,kBAAC,EAAD,iBAAcc,EAAd,CAAoBC,IAAKD,EAAKhB,GAAIE,MAAOA,UCPlC,oBACb,yBAAKI,UAAU,aACb,yBAAKA,UAAU,gBACb,8BACA,8BACA,8BACA,iCCHAY,EAAe,GAOfC,EAAUC,IAAMC,MAAK,kBAAM,gCA0DlBC,EAxDH,WAAO,IAAD,EAEUC,mBAASL,GAFnB,mBAETJ,EAFS,KAEFU,EAFE,OAGcD,oBAAS,GAHvB,mBAGTE,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAf,GAAK,OAAIkB,YAAW,WACtBN,GAAW,GACXF,EAASV,KACR,WAEN,IA0BH,OACE,kBAAC,EAAQmB,SAAT,CAAkBC,MAAO,CAAC7B,WAdT,SAAC8B,GAClBX,EACEV,EAAMsB,QAAO,gBAAEpC,EAAF,EAAEA,GAAF,OAAUmC,IAAWnC,OAYEI,WAzBrB,SAACJ,GAClBwB,EACEV,EAAMC,KAAI,SAACsB,GAIT,OAHIrC,IAAOqC,EAAKrC,KACdqC,EAAKpC,WAAaoC,EAAKpC,WAElBoC,SAoBT,yBAAK/B,UAAU,gBACb,yBAAKA,UAAU,aACb,mDACA,kBAAC,IAAMgC,SAAP,CAAgBC,SAAU,0CACxB,kBAACpB,EAAD,CAASqB,WAbA,SAACzC,EAAO0C,GACzBjB,EAAS,GAAD,mBACHV,GADG,CAEN,CAACd,GAAI0C,KAAKC,MAAO1C,YAAawC,EAAS1C,MAAOA,UAYzC0B,GAAW,kBAACmB,EAAD,MACX9B,EAAM+B,OAAU,kBAAC,EAAD,CAAU/B,MAAOA,IAC/BW,EAAU,KAAO,uDCnDVqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.512b184f.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;","import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'classnames';\r\nimport Context from \"../context\";\r\n\r\nconst TodoItem = (props) => {\r\n  const {title, id, completed, index} = props;\r\n  const {toggleTask, deleteTask} = useContext(Context);\r\n  return (\r\n    <li className={clsx('todos-list__item', {'todos-list__item_done': completed})}>\r\n      <span>\r\n        <input id={`task-id-${id}`} type=\"checkbox\" onChange={() => toggleTask(id)} checked={completed}/>\r\n        <label htmlFor={`task-id-${id}`}>\r\n          <b>{index + 1}. </b>\r\n          {title}\r\n        </label>\r\n      </span>\r\n      <button type='button' onClick={() => deleteTask(id)}>&times;</button>\r\n    </li>)\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  completed: PropTypes.bool,\r\n  index: PropTypes.number,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TodoList = (props) => {\r\n  const {todos} = props;\r\n  return (\r\n    <ol className='todos-list'>\r\n      {todos.map((todo, index) =>\r\n        <TodoItem {...todo} key={todo.id} index={index}/>\r\n      )}\r\n    </ol>\r\n  );\r\n};\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <div className=\"preloader\">\r\n    <div className=\"lds-ellipsis\">\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n      <div/>\r\n    </div>\r\n  </div>\r\n)","import React, {useState, useEffect} from 'react';\nimport TodoList from \"./Todo/TodoList\";\nimport Context from \"./context\";\nimport Loader from \"./Loader\";\n\nconst initialState = [];\n// Эмуляция задержки\n/*const AddTodo = React.lazy(() => new Promise(resolve => {\n  setTimeout(() => {\n    resolve(import('./Todo/AddTodo'))\n  }, 3000);\n}));*/\nconst AddTodo = React.lazy(() => import('./Todo/AddTodo'));\n\nconst App = () => {\n\n  const [todos, setTodos] = useState(initialState);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=8')\n      .then(response => response.json())\n      .then(todos => setTimeout(() => {\n          setLoading(false);\n          setTodos(todos);\n        }, 1500)\n      )\n  }, []);\n\n  const toggleTask = (id) => {\n    setTodos(\n      todos.map((task) => {\n        if (id === task.id) {\n          task.completed = !task.completed\n        }\n        return task;\n      })\n    )\n  };\n\n  const deleteTask = (taskId) => {\n    setTodos(\n      todos.filter(({id}) => taskId !== id)\n    )\n  };\n\n  const createTodo = (title, success) => {\n    setTodos([\n      ...todos,\n      {id: Date.now(), completed: !!success, title: title}\n    ])\n  };\n\n  return (\n    <Context.Provider value={{deleteTask, toggleTask}}>\n      <div className=\"page-wrapper\">\n        <div className=\"container\">\n          <h1>React Rush Tutorial</h1>\n          <React.Suspense fallback={<p>Loading...</p>}>\n            <AddTodo createTodo={createTodo}/>\n          </React.Suspense>\n          {loading && <Loader/>}\n          {todos.length ? (<TodoList todos={todos}/>) :\n            (loading ? null : <p>Todos list is empty.</p>)}\n        </div>\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}